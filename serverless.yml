service: sls-app-sync
frameworkVersion: "2"
variablesResolutionMode: 20210326

plugins:
  - serverless-appsync-plugin
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'dev'}
  region: us-east-1

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "appsync:GraphQL"
      Resource: arn:aws:appsync:*
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:*"

functions:
  # Mentee Handler
  MenteeAppSyncHandler:
    handler: lib/mentee-handler.graphql

  # Mentor Handler
  MentorAppSyncHandler:
    handler: lib/mentor-handler.graphql

  # Admin Handler
  AdminAppSyncHandler:
    handler: lib/admin-handler.graphql

custom:
  accountId: #{AWS::AccountId}
  appSync:
    - name: mentee-api-${self:provider.stage}
      authenticationType: API_KEY
      serviceRole: "AppSyncServiceRole"
      mappingTemplates:
        - dataSource: awsLambdaDataSource
          type: Query #Query, Mutation, Subscription
          field: getProgram
          request: "getProgram-request-mapping-template.txt"
          response: "getProgram-response-mapping-template.txt"
      schema: "./db/mentee/schema.graphql"
      dataSources:
        - type: AWS_LAMBDA
          name: awsLambdaDataSource
          description: "Lambda DataSource"
          config:
            lambdaFunctionArn:
              { Fn::GetAtt: [MenteeAppSyncHandlerLambdaFunction, Arn] }
            serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }

    - name: mentor-api-${self:provider.stage}
      authenticationType: API_KEY
      serviceRole: "AppSyncServiceRole"
      mappingTemplates:
        - dataSource: awsLambdaDataSource
          type: Query #Query, Mutation, Subscription
          field: getProgram
          request: "getProgram-request-mapping-template.txt"
          response: "getProgram-response-mapping-template.txt"
      schema: "./db/mentor/schema.graphql"
      dataSources:
        - type: AWS_LAMBDA
          name: awsLambdaDataSource
          description: "Lambda DataSource"
          config:
            lambdaFunctionArn:
              { Fn::GetAtt: [MentorAppSyncHandlerLambdaFunction, Arn] }
            serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }

    - name: admin-api-${self:provider.stage}
      authenticationType: API_KEY
      serviceRole: "AppSyncServiceRole"
      mappingTemplates:
        - type: Query #Query, Mutation, Subscription
          dataSource: awsLambdaDataSource
          field: getProgram
          request: "getProgram-request-mapping-template.txt"
          response: "getProgram-response-mapping-template.txt"

        - type: Query #Query, Mutation, Subscription
          dataSource: awsLambdaDataSource
          field: listPrograms
          request: "listPrograms-request-mapping-template.txt"
          response: "listPrograms-response-mapping-template.txt"

        - type: Mutation #Query, Mutation, Subscription
          dataSource: awsLambdaDataSource
          field: createProgram
          request: "createProgram-request-mapping-template.txt"
          response: "createProgram-response-mapping-template.txt"
      schema: "./db/admin/schema.graphql"
      dataSources:
        - type: AWS_LAMBDA
          name: awsLambdaDataSource
          description: "Lambda DataSource"
          config:
            lambdaFunctionArn:
              { Fn::GetAtt: [AdminAppSyncHandlerLambdaFunction, Arn] }
            serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }

resources:
  Resources:
    # AppSync lambda role
    AppSyncLambdaServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "Lambda-${self:custom.appSync.0.serviceRole}"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: "Lambda-${self:custom.appSync.0.serviceRole}-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "lambda:invokeFunction"
                  Resource:
                    - "arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-MentorAppSyncHandler"
                    - "arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-MentorAppSyncHandler:*"
                    - "arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-MenteeAppSyncHandler"
                    - "arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-MenteeAppSyncHandler:*"
                    - "arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-AdminAppSyncHandler"
                    - "arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-AdminAppSyncHandler:*"
