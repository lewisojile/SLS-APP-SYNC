schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  getTodo(id: ID!): Todo
  listTodos(
    filter: ModelTodoFilterInput
    limit: Int
    nextToken: String
  ): ModelTodoConnection
  getProgram(id: ID!): Program
  listPrograms(
    filter: ModelProgramFilterInput
    limit: Int
    nextToken: String
  ): ModelProgramConnection
}

type CoAdmin {
  firstName: String!
  lastName: String!
  imageUrl: String
  email: String!
  role: String
  invitationStatus: String!
  companyName: String
  githubHandle: String
  emailMessage: String!
  userId: String!
}

input CoAdminInput {
  firstName: String!
  lastName: String!
  imageUrl: String
  email: String!
  role: String
  invitationStatus: String!
  companyName: String
  githubHandle: String
  emailMessage: String!
  userId: String!
}

input CreateProgramInput {
  id: ID
  projectID: String
  organizationID: String!
  departmentName: String
  programName: String!
  description: String!
  websiteURL: String
  programDetail: ProgramDetailInput
  terms: [TermInput]!
  coAdmins: [CoAdminInput]
  mentors: [MentorInput]
  preRequisiteTasks: [PreRequisiteTaskInput]
  status: String!
  createdAt: String
  createdBy: String!
  updatedAt: String
  updatedBy: String
}

input CreateTodoInput {
  id: ID
  name: String!
  description: String
}

input DeleteProgramInput {
  id: ID!
}

input DeleteTodoInput {
  id: ID!
}

type LearningObjective {
  title: String!
  text: String!
}

input LearningObjectiveInput {
  title: String!
  text: String!
}

type Mentor {
  firstName: String!
  lastName: String!
  imageUrl: String
  email: String!
  role: String
  invitationStatus: String!
  companyName: String
  githubHandle: String
  emailMessage: String!
  userId: String!
}

input MentorInput {
  firstName: String!
  lastName: String!
  imageUrl: String
  email: String!
  role: String
  invitationStatus: String!
  companyName: String
  githubHandle: String
  emailMessage: String!
  userId: String!
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelProgramConditionInput {
  projectID: ModelStringInput
  organizationID: ModelStringInput
  departmentName: ModelStringInput
  programName: ModelStringInput
  description: ModelStringInput
  websiteURL: ModelStringInput
  status: ModelStringInput
  createdAt: ModelStringInput
  createdBy: ModelStringInput
  updatedAt: ModelStringInput
  updatedBy: ModelStringInput
  and: [ModelProgramConditionInput]
  or: [ModelProgramConditionInput]
  not: ModelProgramConditionInput
}

type ModelProgramConnection {
  items: [Program]
  nextToken: String
}

input ModelProgramFilterInput {
  id: ModelIDInput
  projectID: ModelStringInput
  organizationID: ModelStringInput
  departmentName: ModelStringInput
  programName: ModelStringInput
  description: ModelStringInput
  websiteURL: ModelStringInput
  status: ModelStringInput
  createdAt: ModelStringInput
  createdBy: ModelStringInput
  updatedAt: ModelStringInput
  updatedBy: ModelStringInput
  and: [ModelProgramFilterInput]
  or: [ModelProgramFilterInput]
  not: ModelProgramFilterInput
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelTodoConditionInput {
  name: ModelStringInput
  description: ModelStringInput
  and: [ModelTodoConditionInput]
  or: [ModelTodoConditionInput]
  not: ModelTodoConditionInput
}

type ModelTodoConnection {
  items: [Todo]
  nextToken: String
}

input ModelTodoFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  description: ModelStringInput
  and: [ModelTodoFilterInput]
  or: [ModelTodoFilterInput]
  not: ModelTodoFilterInput
}

type Mutation {
  createTodo(input: CreateTodoInput!, condition: ModelTodoConditionInput): Todo
  updateTodo(input: UpdateTodoInput!, condition: ModelTodoConditionInput): Todo
  deleteTodo(input: DeleteTodoInput!, condition: ModelTodoConditionInput): Todo
  createProgram(
    input: CreateProgramInput!
    condition: ModelProgramConditionInput
  ): Program
  updateProgram(
    input: UpdateProgramInput!
    condition: ModelProgramConditionInput
  ): Program
  deleteProgram(
    input: DeleteProgramInput!
    condition: ModelProgramConditionInput
  ): Program
}

type PreRequisiteTask {
  prerequisiteName: String!
  dueDate: String
  submission: String
  submitFile: String
  githubURL: String
  description: String!
  category: String!
  custom: Boolean!
}

input PreRequisiteTaskInput {
  prerequisiteName: String!
  dueDate: String
  submission: String
  submitFile: String
  githubURL: String
  description: String!
  category: String!
  custom: Boolean!
}

type Program {
  id: ID!
  projectID: String
  organizationID: String!
  departmentName: String
  programName: String!
  description: String!
  websiteURL: String
  programDetail: ProgramDetail
  terms: [Term]!
  coAdmins: [CoAdmin]
  mentors: [Mentor]
  preRequisiteTasks: [PreRequisiteTask]
  status: String!
  createdAt: String!
  createdBy: String!
  updatedAt: String
  updatedBy: String
}

type ProgramDetail {
  programLogoURL: String!
  learningObjectives: [LearningObjective!]!
  relevantLinks: [RelevantLink!]
  requiredSkillsAndTechnologies: [String!]!
  availableMenteeSpots: Float
  publish: [Publish!]
}

input ProgramDetailInput {
  programLogoURL: String!
  learningObjectives: [LearningObjectiveInput!]!
  relevantLinks: [RelevantLinkInput!]
  requiredSkillsAndTechnologies: [String!]!
  availableMenteeSpots: Float
  publish: [PublishInput!]
}

type Publish {
  publishTo: String!
  url: String!
}

input PublishInput {
  publishTo: String!
  url: String!
}

type RelevantLink {
  title: String!
  url: String!
}

input RelevantLinkInput {
  title: String!
  url: String!
}

type Subscription {
  onCreateTodo: Todo @aws_subscribe(mutations: ["createTodo"])
  onUpdateTodo: Todo @aws_subscribe(mutations: ["updateTodo"])
  onDeleteTodo: Todo @aws_subscribe(mutations: ["deleteTodo"])
  onCreateProgram: Program @aws_subscribe(mutations: ["createProgram"])
  onUpdateProgram: Program @aws_subscribe(mutations: ["updateProgram"])
  onDeleteProgram: Program @aws_subscribe(mutations: ["deleteProgram"])
}

type Term {
  termName: String!
  termStartDate: Float!
  termEndDate: Float!
  applicationAcceptanceStartDate: Float!
  applicationAcceptanceEndDate: Float!
}

input TermInput {
  termName: String!
  termStartDate: Float!
  termEndDate: Float!
  applicationAcceptanceStartDate: Float!
  applicationAcceptanceEndDate: Float!
}

type Todo {
  id: ID!
  name: String!
  description: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input UpdateProgramInput {
  id: ID!
  projectID: String
  organizationID: String
  departmentName: String
  programName: String
  description: String
  websiteURL: String
  programDetail: ProgramDetailInput
  terms: [TermInput]
  coAdmins: [CoAdminInput]
  mentors: [MentorInput]
  preRequisiteTasks: [PreRequisiteTaskInput]
  status: String
  createdAt: String
  createdBy: String
  updatedAt: String
  updatedBy: String
}

input UpdateTodoInput {
  id: ID!
  name: String
  description: String
}
