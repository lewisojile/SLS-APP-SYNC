{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "MenteeAppSyncHandlerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/sls-app-sync-dev-MenteeAppSyncHandler"
      }
    },
    "MentorAppSyncHandlerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/sls-app-sync-dev-MentorAppSyncHandler"
      }
    },
    "AdminAppSyncHandlerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/sls-app-sync-dev-AdminAppSyncHandler"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "sls-app-sync",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sls-app-sync-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sls-app-sync-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "appsync:GraphQL"
                  ],
                  "Resource": "arn:aws:appsync:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:DescribeTable",
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:*:*"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "sls-app-sync",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "MenteeAppSyncHandlerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/sls-app-sync/dev/1630843884783-2021-09-05T12:11:24.783Z/sls-app-sync.zip"
        },
        "Handler": "src/appsync/lib/mentee-handler.graphql",
        "Runtime": "nodejs12.x",
        "FunctionName": "sls-app-sync-dev-MenteeAppSyncHandler",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "MenteeAppSyncHandlerLogGroup"
      ]
    },
    "MentorAppSyncHandlerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/sls-app-sync/dev/1630843884783-2021-09-05T12:11:24.783Z/sls-app-sync.zip"
        },
        "Handler": "src/appsync/lib/mentor-handler.graphql",
        "Runtime": "nodejs12.x",
        "FunctionName": "sls-app-sync-dev-MentorAppSyncHandler",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "MentorAppSyncHandlerLogGroup"
      ]
    },
    "AdminAppSyncHandlerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/sls-app-sync/dev/1630843884783-2021-09-05T12:11:24.783Z/sls-app-sync.zip"
        },
        "Handler": "src/appsync/lib/admin-handler.graphql",
        "Runtime": "nodejs12.x",
        "FunctionName": "sls-app-sync-dev-AdminAppSyncHandler",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AdminAppSyncHandlerLogGroup"
      ]
    },
    "MenteeAppSyncHandlerLambdaVersionD7a4OwmLLrc2HRXaaz1muMrq9wHXNLjegEnqZolgPY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "MenteeAppSyncHandlerLambdaFunction"
        },
        "CodeSha256": "MRxVLjCP5H273eSlv8S/XaBQGA7/XBp5tnAICeDLoAQ="
      }
    },
    "MentorAppSyncHandlerLambdaVersionPXvQy71Fj37KMWsaA8h4jPsYzzu7XWrNinq3XpwKJo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "MentorAppSyncHandlerLambdaFunction"
        },
        "CodeSha256": "MRxVLjCP5H273eSlv8S/XaBQGA7/XBp5tnAICeDLoAQ="
      }
    },
    "AdminAppSyncHandlerLambdaVersionefHS7upvAPLFe1wSXnrGd1xpV87mlvOw0M8iMnNJCc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AdminAppSyncHandlerLambdaFunction"
        },
        "CodeSha256": "MRxVLjCP5H273eSlv8S/XaBQGA7/XBp5tnAICeDLoAQ="
      }
    },
    "AppSyncLambdaServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": "Lambda-AppSyncServiceRole",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "appsync.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "Lambda-AppSyncServiceRole-Policy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:invokeFunction"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:lambda:us-east-1:${AWS::AccountId}:function:sls-app-sync-dev-MentorAppSyncHandler"
                    },
                    {
                      "Fn::Sub": "arn:aws:lambda:us-east-1:${AWS::AccountId}:function:sls-app-sync-dev-MentorAppSyncHandler:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:lambda:us-east-1:${AWS::AccountId}:function:sls-app-sync-dev-MenteeAppSyncHandler"
                    },
                    {
                      "Fn::Sub": "arn:aws:lambda:us-east-1:${AWS::AccountId}:function:sls-app-sync-dev-MenteeAppSyncHandler:*"
                    },
                    {
                      "Fn::Sub": "arn:aws:lambda:us-east-1:${AWS::AccountId}:function:sls-app-sync-dev-AdminAppSyncHandler"
                    },
                    {
                      "Fn::Sub": "arn:aws:lambda:us-east-1:${AWS::AccountId}:function:sls-app-sync-dev-AdminAppSyncHandler:*"
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "MenteeapidevGraphQlApi": {
      "Type": "AWS::AppSync::GraphQLApi",
      "Properties": {
        "Name": "mentee-api-dev",
        "AuthenticationType": "API_KEY",
        "AdditionalAuthenticationProviders": [],
        "XrayEnabled": false
      }
    },
    "MenteeapidevGraphQlApiKeyDefault": {
      "Type": "AWS::AppSync::ApiKey",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "MenteeapidevGraphQlApi",
            "ApiId"
          ]
        },
        "Description": "Auto-generated api key",
        "Expires": 1662379200
      }
    },
    "MenteeapidevGraphQlSchema": {
      "Type": "AWS::AppSync::GraphQLSchema",
      "Properties": {
        "Definition": "schema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\ntype Query {\n  getTodo(id: ID!): Todo\n  listTodos(filter: ModelTodoFilterInput, limit: Int, nextToken: String): ModelTodoConnection\n  getProgram(id: ID!): Program\n  listPrograms(filter: ModelProgramFilterInput, limit: Int, nextToken: String): ModelProgramConnection\n}\n\ntype CoAdmin {\n  firstName: String!\n  lastName: String!\n  imageUrl: String\n  email: String!\n  role: String\n  invitationStatus: String!\n  companyName: String\n  githubHandle: String\n  emailMessage: String!\n  userId: String!\n}\n\ninput CoAdminInput {\n  firstName: String!\n  lastName: String!\n  imageUrl: String\n  email: String!\n  role: String\n  invitationStatus: String!\n  companyName: String\n  githubHandle: String\n  emailMessage: String!\n  userId: String!\n}\n\ninput CreateProgramInput {\n  id: ID\n  projectID: String\n  organizationID: String!\n  departmentName: String\n  programName: String!\n  description: String!\n  websiteURL: String\n  programDetail: ProgramDetailInput\n  terms: [TermInput]!\n  coAdmins: [CoAdminInput]\n  mentors: [MentorInput]\n  preRequisiteTasks: [PreRequisiteTaskInput]\n  status: String!\n  createdAt: String\n  createdBy: String!\n  updatedAt: String\n  updatedBy: String\n}\n\ninput CreateTodoInput {\n  id: ID\n  name: String!\n  description: String\n}\n\ninput DeleteProgramInput {\n  id: ID!\n}\n\ninput DeleteTodoInput {\n  id: ID!\n}\n\ntype LearningObjective {\n  title: String!\n  text: String!\n}\n\ninput LearningObjectiveInput {\n  title: String!\n  text: String!\n}\n\ntype Mentor {\n  firstName: String!\n  lastName: String!\n  imageUrl: String\n  email: String!\n  role: String\n  invitationStatus: String!\n  companyName: String\n  githubHandle: String\n  emailMessage: String!\n  userId: String!\n}\n\ninput MentorInput {\n  firstName: String!\n  lastName: String!\n  imageUrl: String\n  email: String!\n  role: String\n  invitationStatus: String!\n  companyName: String\n  githubHandle: String\n  emailMessage: String!\n  userId: String!\n}\n\nenum ModelAttributeTypes {\n  binary\n  binarySet\n  bool\n  list\n  map\n  number\n  numberSet\n  string\n  stringSet\n  _null\n}\n\ninput ModelBooleanInput {\n  ne: Boolean\n  eq: Boolean\n  attributeExists: Boolean\n  attributeType: ModelAttributeTypes\n}\n\ninput ModelFloatInput {\n  ne: Float\n  eq: Float\n  le: Float\n  lt: Float\n  ge: Float\n  gt: Float\n  between: [Float]\n  attributeExists: Boolean\n  attributeType: ModelAttributeTypes\n}\n\ninput ModelIDInput {\n  ne: ID\n  eq: ID\n  le: ID\n  lt: ID\n  ge: ID\n  gt: ID\n  contains: ID\n  notContains: ID\n  between: [ID]\n  beginsWith: ID\n  attributeExists: Boolean\n  attributeType: ModelAttributeTypes\n  size: ModelSizeInput\n}\n\ninput ModelIntInput {\n  ne: Int\n  eq: Int\n  le: Int\n  lt: Int\n  ge: Int\n  gt: Int\n  between: [Int]\n  attributeExists: Boolean\n  attributeType: ModelAttributeTypes\n}\n\ninput ModelProgramConditionInput {\n  projectID: ModelStringInput\n  organizationID: ModelStringInput\n  departmentName: ModelStringInput\n  programName: ModelStringInput\n  description: ModelStringInput\n  websiteURL: ModelStringInput\n  status: ModelStringInput\n  createdAt: ModelStringInput\n  createdBy: ModelStringInput\n  updatedAt: ModelStringInput\n  updatedBy: ModelStringInput\n  and: [ModelProgramConditionInput]\n  or: [ModelProgramConditionInput]\n  not: ModelProgramConditionInput\n}\n\ntype ModelProgramConnection {\n  items: [Program]\n  nextToken: String\n}\n\ninput ModelProgramFilterInput {\n  id: ModelIDInput\n  projectID: ModelStringInput\n  organizationID: ModelStringInput\n  departmentName: ModelStringInput\n  programName: ModelStringInput\n  description: ModelStringInput\n  websiteURL: ModelStringInput\n  status: ModelStringInput\n  createdAt: ModelStringInput\n  createdBy: ModelStringInput\n  updatedAt: ModelStringInput\n  updatedBy: ModelStringInput\n  and: [ModelProgramFilterInput]\n  or: [ModelProgramFilterInput]\n  not: ModelProgramFilterInput\n}\n\ninput ModelSizeInput {\n  ne: Int\n  eq: Int\n  le: Int\n  lt: Int\n  ge: Int\n  gt: Int\n  between: [Int]\n}\n\nenum ModelSortDirection {\n  ASC\n  DESC\n}\n\ninput ModelStringInput {\n  ne: String\n  eq: String\n  le: String\n  lt: String\n  ge: String\n  gt: String\n  contains: String\n  notContains: String\n  between: [String]\n  beginsWith: String\n  attributeExists: Boolean\n  attributeType: ModelAttributeTypes\n  size: ModelSizeInput\n}\n\ninput ModelTodoConditionInput {\n  name: ModelStringInput\n  description: ModelStringInput\n  and: [ModelTodoConditionInput]\n  or: [ModelTodoConditionInput]\n  not: ModelTodoConditionInput\n}\n\ntype ModelTodoConnection {\n  items: [Todo]\n  nextToken: String\n}\n\ninput ModelTodoFilterInput {\n  id: ModelIDInput\n  name: ModelStringInput\n  description: ModelStringInput\n  and: [ModelTodoFilterInput]\n  or: [ModelTodoFilterInput]\n  not: ModelTodoFilterInput\n}\n\ntype Mutation {\n  createTodo(input: CreateTodoInput!, condition: ModelTodoConditionInput): Todo\n  updateTodo(input: UpdateTodoInput!, condition: ModelTodoConditionInput): Todo\n  deleteTodo(input: DeleteTodoInput!, condition: ModelTodoConditionInput): Todo\n  createProgram(input: CreateProgramInput!, condition: ModelProgramConditionInput): Program\n  updateProgram(input: UpdateProgramInput!, condition: ModelProgramConditionInput): Program\n  deleteProgram(input: DeleteProgramInput!, condition: ModelProgramConditionInput): Program\n}\n\ntype PreRequisiteTask {\n  prerequisiteName: String!\n  dueDate: String\n  submission: String\n  submitFile: String\n  githubURL: String\n  description: String!\n  category: String!\n  custom: Boolean!\n}\n\ninput PreRequisiteTaskInput {\n  prerequisiteName: String!\n  dueDate: String\n  submission: String\n  submitFile: String\n  githubURL: String\n  description: String!\n  category: String!\n  custom: Boolean!\n}\n\ntype Program {\n  id: ID!\n  projectID: String\n  organizationID: String!\n  departmentName: String\n  programName: String!\n  description: String!\n  websiteURL: String\n  programDetail: ProgramDetail\n  terms: [Term]!\n  coAdmins: [CoAdmin]\n  mentors: [Mentor]\n  preRequisiteTasks: [PreRequisiteTask]\n  status: String!\n  createdAt: String!\n  createdBy: String!\n  updatedAt: String\n  updatedBy: String\n}\n\ntype ProgramDetail {\n  programLogoURL: String!\n  learningObjectives: [LearningObjective!]!\n  relevantLinks: [RelevantLink!]\n  requiredSkillsAndTechnologies: [String!]!\n  availableMenteeSpots: Float\n  publish: [Publish!]\n}\n\ninput ProgramDetailInput {\n  programLogoURL: String!\n  learningObjectives: [LearningObjectiveInput!]!\n  relevantLinks: [RelevantLinkInput!]\n  requiredSkillsAndTechnologies: [String!]!\n  availableMenteeSpots: Float\n  publish: [PublishInput!]\n}\n\ntype Publish {\n  publishTo: String!\n  url: String!\n}\n\ninput PublishInput {\n  publishTo: String!\n  url: String!\n}\n\ntype RelevantLink {\n  title: String!\n  url: String!\n}\n\ninput RelevantLinkInput {\n  title: String!\n  url: String!\n}\n\ntype Subscription {\n  onCreateTodo: Todo @aws_subscribe(mutations: [\"createTodo\"])\n  onUpdateTodo: Todo @aws_subscribe(mutations: [\"updateTodo\"])\n  onDeleteTodo: Todo @aws_subscribe(mutations: [\"deleteTodo\"])\n  onCreateProgram: Program @aws_subscribe(mutations: [\"createProgram\"])\n  onUpdateProgram: Program @aws_subscribe(mutations: [\"updateProgram\"])\n  onDeleteProgram: Program @aws_subscribe(mutations: [\"deleteProgram\"])\n}\n\ntype Term {\n  termName: String!\n  termStartDate: Float!\n  termEndDate: Float!\n  applicationAcceptanceStartDate: Float!\n  applicationAcceptanceEndDate: Float!\n}\n\ninput TermInput {\n  termName: String!\n  termStartDate: Float!\n  termEndDate: Float!\n  applicationAcceptanceStartDate: Float!\n  applicationAcceptanceEndDate: Float!\n}\n\ntype Todo {\n  id: ID!\n  name: String!\n  description: String\n  createdAt: AWSDateTime!\n  updatedAt: AWSDateTime!\n}\n\ninput UpdateProgramInput {\n  id: ID!\n  projectID: String\n  organizationID: String\n  departmentName: String\n  programName: String\n  description: String\n  websiteURL: String\n  programDetail: ProgramDetailInput\n  terms: [TermInput]\n  coAdmins: [CoAdminInput]\n  mentors: [MentorInput]\n  preRequisiteTasks: [PreRequisiteTaskInput]\n  status: String\n  createdAt: String\n  createdBy: String\n  updatedAt: String\n  updatedBy: String\n}\n\ninput UpdateTodoInput {\n  id: ID!\n  name: String\n  description: String\n}",
        "ApiId": {
          "Fn::GetAtt": [
            "MenteeapidevGraphQlApi",
            "ApiId"
          ]
        }
      }
    },
    "MenteeapidevGraphQlDsawsLambdaDataSource": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "MenteeapidevGraphQlApi",
            "ApiId"
          ]
        },
        "Name": "awsLambdaDataSource",
        "Description": "Lambda DataSource",
        "Type": "AWS_LAMBDA",
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "AppSyncLambdaServiceRole",
            "Arn"
          ]
        },
        "LambdaConfig": {
          "LambdaFunctionArn": {
            "Fn::GetAtt": [
              "MenteeAppSyncHandlerLambdaFunction",
              "Arn"
            ]
          }
        }
      }
    },
    "MenteeapidevGraphQlResolverQuerygetProgram": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "MenteeapidevGraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "MenteeapidevGraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "getProgram",
        "RequestMappingTemplate": "{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"Invoke\",\n    \"payload\": {\n        \"field\": \"getProgram\",\n        \"arguments\":  $utils.toJson($context.arguments)\n    }\n}",
        "ResponseMappingTemplate": "$util.toJson($context.result)",
        "Kind": "UNIT",
        "DataSourceName": {
          "Fn::GetAtt": [
            "MenteeapidevGraphQlDsawsLambdaDataSource",
            "Name"
          ]
        }
      }
    },
    "MentorapidevGraphQlApi": {
      "Type": "AWS::AppSync::GraphQLApi",
      "Properties": {
        "Name": "mentor-api-dev",
        "AuthenticationType": "API_KEY",
        "AdditionalAuthenticationProviders": [],
        "XrayEnabled": false
      }
    },
    "MentorapidevGraphQlApiKeyDefault": {
      "Type": "AWS::AppSync::ApiKey",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "MentorapidevGraphQlApi",
            "ApiId"
          ]
        },
        "Description": "Auto-generated api key",
        "Expires": 1662379200
      }
    },
    "MentorapidevGraphQlSchema": {
      "Type": "AWS::AppSync::GraphQLSchema",
      "Properties": {
        "Definition": "schema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\ntype Query {\n  getTodo(id: ID!): Todo\n  listTodos(filter: ModelTodoFilterInput, limit: Int, nextToken: String): ModelTodoConnection\n  getProgram(id: ID!): Program\n  listPrograms(filter: ModelProgramFilterInput, limit: Int, nextToken: String): ModelProgramConnection\n}\n\ntype CoAdmin {\n  firstName: String!\n  lastName: String!\n  imageUrl: String\n  email: String!\n  role: String\n  invitationStatus: String!\n  companyName: String\n  githubHandle: String\n  emailMessage: String!\n  userId: String!\n}\n\ninput CoAdminInput {\n  firstName: String!\n  lastName: String!\n  imageUrl: String\n  email: String!\n  role: String\n  invitationStatus: String!\n  companyName: String\n  githubHandle: String\n  emailMessage: String!\n  userId: String!\n}\n\ninput CreateProgramInput {\n  id: ID\n  projectID: String\n  organizationID: String!\n  departmentName: String\n  programName: String!\n  description: String!\n  websiteURL: String\n  programDetail: ProgramDetailInput\n  terms: [TermInput]!\n  coAdmins: [CoAdminInput]\n  mentors: [MentorInput]\n  preRequisiteTasks: [PreRequisiteTaskInput]\n  status: String!\n  createdAt: String\n  createdBy: String!\n  updatedAt: String\n  updatedBy: String\n}\n\ninput CreateTodoInput {\n  id: ID\n  name: String!\n  description: String\n}\n\ninput DeleteProgramInput {\n  id: ID!\n}\n\ninput DeleteTodoInput {\n  id: ID!\n}\n\ntype LearningObjective {\n  title: String!\n  text: String!\n}\n\ninput LearningObjectiveInput {\n  title: String!\n  text: String!\n}\n\ntype Mentor {\n  firstName: String!\n  lastName: String!\n  imageUrl: String\n  email: String!\n  role: String\n  invitationStatus: String!\n  companyName: String\n  githubHandle: String\n  emailMessage: String!\n  userId: String!\n}\n\ninput MentorInput {\n  firstName: String!\n  lastName: String!\n  imageUrl: String\n  email: String!\n  role: String\n  invitationStatus: String!\n  companyName: String\n  githubHandle: String\n  emailMessage: String!\n  userId: String!\n}\n\nenum ModelAttributeTypes {\n  binary\n  binarySet\n  bool\n  list\n  map\n  number\n  numberSet\n  string\n  stringSet\n  _null\n}\n\ninput ModelBooleanInput {\n  ne: Boolean\n  eq: Boolean\n  attributeExists: Boolean\n  attributeType: ModelAttributeTypes\n}\n\ninput ModelFloatInput {\n  ne: Float\n  eq: Float\n  le: Float\n  lt: Float\n  ge: Float\n  gt: Float\n  between: [Float]\n  attributeExists: Boolean\n  attributeType: ModelAttributeTypes\n}\n\ninput ModelIDInput {\n  ne: ID\n  eq: ID\n  le: ID\n  lt: ID\n  ge: ID\n  gt: ID\n  contains: ID\n  notContains: ID\n  between: [ID]\n  beginsWith: ID\n  attributeExists: Boolean\n  attributeType: ModelAttributeTypes\n  size: ModelSizeInput\n}\n\ninput ModelIntInput {\n  ne: Int\n  eq: Int\n  le: Int\n  lt: Int\n  ge: Int\n  gt: Int\n  between: [Int]\n  attributeExists: Boolean\n  attributeType: ModelAttributeTypes\n}\n\ninput ModelProgramConditionInput {\n  projectID: ModelStringInput\n  organizationID: ModelStringInput\n  departmentName: ModelStringInput\n  programName: ModelStringInput\n  description: ModelStringInput\n  websiteURL: ModelStringInput\n  status: ModelStringInput\n  createdAt: ModelStringInput\n  createdBy: ModelStringInput\n  updatedAt: ModelStringInput\n  updatedBy: ModelStringInput\n  and: [ModelProgramConditionInput]\n  or: [ModelProgramConditionInput]\n  not: ModelProgramConditionInput\n}\n\ntype ModelProgramConnection {\n  items: [Program]\n  nextToken: String\n}\n\ninput ModelProgramFilterInput {\n  id: ModelIDInput\n  projectID: ModelStringInput\n  organizationID: ModelStringInput\n  departmentName: ModelStringInput\n  programName: ModelStringInput\n  description: ModelStringInput\n  websiteURL: ModelStringInput\n  status: ModelStringInput\n  createdAt: ModelStringInput\n  createdBy: ModelStringInput\n  updatedAt: ModelStringInput\n  updatedBy: ModelStringInput\n  and: [ModelProgramFilterInput]\n  or: [ModelProgramFilterInput]\n  not: ModelProgramFilterInput\n}\n\ninput ModelSizeInput {\n  ne: Int\n  eq: Int\n  le: Int\n  lt: Int\n  ge: Int\n  gt: Int\n  between: [Int]\n}\n\nenum ModelSortDirection {\n  ASC\n  DESC\n}\n\ninput ModelStringInput {\n  ne: String\n  eq: String\n  le: String\n  lt: String\n  ge: String\n  gt: String\n  contains: String\n  notContains: String\n  between: [String]\n  beginsWith: String\n  attributeExists: Boolean\n  attributeType: ModelAttributeTypes\n  size: ModelSizeInput\n}\n\ninput ModelTodoConditionInput {\n  name: ModelStringInput\n  description: ModelStringInput\n  and: [ModelTodoConditionInput]\n  or: [ModelTodoConditionInput]\n  not: ModelTodoConditionInput\n}\n\ntype ModelTodoConnection {\n  items: [Todo]\n  nextToken: String\n}\n\ninput ModelTodoFilterInput {\n  id: ModelIDInput\n  name: ModelStringInput\n  description: ModelStringInput\n  and: [ModelTodoFilterInput]\n  or: [ModelTodoFilterInput]\n  not: ModelTodoFilterInput\n}\n\ntype Mutation {\n  createTodo(input: CreateTodoInput!, condition: ModelTodoConditionInput): Todo\n  updateTodo(input: UpdateTodoInput!, condition: ModelTodoConditionInput): Todo\n  deleteTodo(input: DeleteTodoInput!, condition: ModelTodoConditionInput): Todo\n  createProgram(input: CreateProgramInput!, condition: ModelProgramConditionInput): Program\n  updateProgram(input: UpdateProgramInput!, condition: ModelProgramConditionInput): Program\n  deleteProgram(input: DeleteProgramInput!, condition: ModelProgramConditionInput): Program\n}\n\ntype PreRequisiteTask {\n  prerequisiteName: String!\n  dueDate: String\n  submission: String\n  submitFile: String\n  githubURL: String\n  description: String!\n  category: String!\n  custom: Boolean!\n}\n\ninput PreRequisiteTaskInput {\n  prerequisiteName: String!\n  dueDate: String\n  submission: String\n  submitFile: String\n  githubURL: String\n  description: String!\n  category: String!\n  custom: Boolean!\n}\n\ntype Program {\n  id: ID!\n  projectID: String\n  organizationID: String!\n  departmentName: String\n  programName: String!\n  description: String!\n  websiteURL: String\n  programDetail: ProgramDetail\n  terms: [Term]!\n  coAdmins: [CoAdmin]\n  mentors: [Mentor]\n  preRequisiteTasks: [PreRequisiteTask]\n  status: String!\n  createdAt: String!\n  createdBy: String!\n  updatedAt: String\n  updatedBy: String\n}\n\ntype ProgramDetail {\n  programLogoURL: String!\n  learningObjectives: [LearningObjective!]!\n  relevantLinks: [RelevantLink!]\n  requiredSkillsAndTechnologies: [String!]!\n  availableMenteeSpots: Float\n  publish: [Publish!]\n}\n\ninput ProgramDetailInput {\n  programLogoURL: String!\n  learningObjectives: [LearningObjectiveInput!]!\n  relevantLinks: [RelevantLinkInput!]\n  requiredSkillsAndTechnologies: [String!]!\n  availableMenteeSpots: Float\n  publish: [PublishInput!]\n}\n\ntype Publish {\n  publishTo: String!\n  url: String!\n}\n\ninput PublishInput {\n  publishTo: String!\n  url: String!\n}\n\ntype RelevantLink {\n  title: String!\n  url: String!\n}\n\ninput RelevantLinkInput {\n  title: String!\n  url: String!\n}\n\ntype Subscription {\n  onCreateTodo: Todo @aws_subscribe(mutations: [\"createTodo\"])\n  onUpdateTodo: Todo @aws_subscribe(mutations: [\"updateTodo\"])\n  onDeleteTodo: Todo @aws_subscribe(mutations: [\"deleteTodo\"])\n  onCreateProgram: Program @aws_subscribe(mutations: [\"createProgram\"])\n  onUpdateProgram: Program @aws_subscribe(mutations: [\"updateProgram\"])\n  onDeleteProgram: Program @aws_subscribe(mutations: [\"deleteProgram\"])\n}\n\ntype Term {\n  termName: String!\n  termStartDate: Float!\n  termEndDate: Float!\n  applicationAcceptanceStartDate: Float!\n  applicationAcceptanceEndDate: Float!\n}\n\ninput TermInput {\n  termName: String!\n  termStartDate: Float!\n  termEndDate: Float!\n  applicationAcceptanceStartDate: Float!\n  applicationAcceptanceEndDate: Float!\n}\n\ntype Todo {\n  id: ID!\n  name: String!\n  description: String\n  createdAt: AWSDateTime!\n  updatedAt: AWSDateTime!\n}\n\ninput UpdateProgramInput {\n  id: ID!\n  projectID: String\n  organizationID: String\n  departmentName: String\n  programName: String\n  description: String\n  websiteURL: String\n  programDetail: ProgramDetailInput\n  terms: [TermInput]\n  coAdmins: [CoAdminInput]\n  mentors: [MentorInput]\n  preRequisiteTasks: [PreRequisiteTaskInput]\n  status: String\n  createdAt: String\n  createdBy: String\n  updatedAt: String\n  updatedBy: String\n}\n\ninput UpdateTodoInput {\n  id: ID!\n  name: String\n  description: String\n}",
        "ApiId": {
          "Fn::GetAtt": [
            "MentorapidevGraphQlApi",
            "ApiId"
          ]
        }
      }
    },
    "MentorapidevGraphQlDsawsLambdaDataSource": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "MentorapidevGraphQlApi",
            "ApiId"
          ]
        },
        "Name": "awsLambdaDataSource",
        "Description": "Lambda DataSource",
        "Type": "AWS_LAMBDA",
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "AppSyncLambdaServiceRole",
            "Arn"
          ]
        },
        "LambdaConfig": {
          "LambdaFunctionArn": {
            "Fn::GetAtt": [
              "MentorAppSyncHandlerLambdaFunction",
              "Arn"
            ]
          }
        }
      }
    },
    "MentorapidevGraphQlResolverQuerygetProgram": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "MentorapidevGraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "MentorapidevGraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "getProgram",
        "RequestMappingTemplate": "{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"Invoke\",\n    \"payload\": {\n        \"field\": \"getProgram\",\n        \"arguments\":  $utils.toJson($context.arguments)\n    }\n}",
        "ResponseMappingTemplate": "$util.toJson($context.result)",
        "Kind": "UNIT",
        "DataSourceName": {
          "Fn::GetAtt": [
            "MentorapidevGraphQlDsawsLambdaDataSource",
            "Name"
          ]
        }
      }
    },
    "AdminapidevGraphQlApi": {
      "Type": "AWS::AppSync::GraphQLApi",
      "Properties": {
        "Name": "admin-api-dev",
        "AuthenticationType": "API_KEY",
        "AdditionalAuthenticationProviders": [],
        "XrayEnabled": false
      }
    },
    "AdminapidevGraphQlApiKeyDefault": {
      "Type": "AWS::AppSync::ApiKey",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "AdminapidevGraphQlApi",
            "ApiId"
          ]
        },
        "Description": "Auto-generated api key",
        "Expires": 1662379200
      }
    },
    "AdminapidevGraphQlSchema": {
      "Type": "AWS::AppSync::GraphQLSchema",
      "Properties": {
        "Definition": "schema {\n  query: Query\n  mutation: Mutation\n  subscription: Subscription\n}\n\ntype Query {\n  getTodo(id: ID!): Todo\n  listTodos(filter: ModelTodoFilterInput, limit: Int, nextToken: String): ModelTodoConnection\n  getProgram(id: ID!): Program\n  listPrograms(filter: ModelProgramFilterInput, limit: Int, nextToken: String): ModelProgramConnection\n}\n\ntype CoAdmin {\n  firstName: String!\n  lastName: String!\n  imageUrl: String\n  email: String!\n  role: String\n  invitationStatus: String!\n  companyName: String\n  githubHandle: String\n  emailMessage: String!\n  userId: String!\n}\n\ninput CoAdminInput {\n  firstName: String!\n  lastName: String!\n  imageUrl: String\n  email: String!\n  role: String\n  invitationStatus: String!\n  companyName: String\n  githubHandle: String\n  emailMessage: String!\n  userId: String!\n}\n\ninput CreateProgramInput {\n  id: ID\n  projectID: String\n  organizationID: String!\n  departmentName: String\n  programName: String!\n  description: String!\n  websiteURL: String\n  programDetail: ProgramDetailInput\n  terms: [TermInput]!\n  coAdmins: [CoAdminInput]\n  mentors: [MentorInput]\n  preRequisiteTasks: [PreRequisiteTaskInput]\n  status: String!\n  createdAt: String\n  createdBy: String!\n  updatedAt: String\n  updatedBy: String\n}\n\ninput CreateTodoInput {\n  id: ID\n  name: String!\n  description: String\n}\n\ninput DeleteProgramInput {\n  id: ID!\n}\n\ninput DeleteTodoInput {\n  id: ID!\n}\n\ntype LearningObjective {\n  title: String!\n  text: String!\n}\n\ninput LearningObjectiveInput {\n  title: String!\n  text: String!\n}\n\ntype Mentor {\n  firstName: String!\n  lastName: String!\n  imageUrl: String\n  email: String!\n  role: String\n  invitationStatus: String!\n  companyName: String\n  githubHandle: String\n  emailMessage: String!\n  userId: String!\n}\n\ninput MentorInput {\n  firstName: String!\n  lastName: String!\n  imageUrl: String\n  email: String!\n  role: String\n  invitationStatus: String!\n  companyName: String\n  githubHandle: String\n  emailMessage: String!\n  userId: String!\n}\n\nenum ModelAttributeTypes {\n  binary\n  binarySet\n  bool\n  list\n  map\n  number\n  numberSet\n  string\n  stringSet\n  _null\n}\n\ninput ModelBooleanInput {\n  ne: Boolean\n  eq: Boolean\n  attributeExists: Boolean\n  attributeType: ModelAttributeTypes\n}\n\ninput ModelFloatInput {\n  ne: Float\n  eq: Float\n  le: Float\n  lt: Float\n  ge: Float\n  gt: Float\n  between: [Float]\n  attributeExists: Boolean\n  attributeType: ModelAttributeTypes\n}\n\ninput ModelIDInput {\n  ne: ID\n  eq: ID\n  le: ID\n  lt: ID\n  ge: ID\n  gt: ID\n  contains: ID\n  notContains: ID\n  between: [ID]\n  beginsWith: ID\n  attributeExists: Boolean\n  attributeType: ModelAttributeTypes\n  size: ModelSizeInput\n}\n\ninput ModelIntInput {\n  ne: Int\n  eq: Int\n  le: Int\n  lt: Int\n  ge: Int\n  gt: Int\n  between: [Int]\n  attributeExists: Boolean\n  attributeType: ModelAttributeTypes\n}\n\ninput ModelProgramConditionInput {\n  projectID: ModelStringInput\n  organizationID: ModelStringInput\n  departmentName: ModelStringInput\n  programName: ModelStringInput\n  description: ModelStringInput\n  websiteURL: ModelStringInput\n  status: ModelStringInput\n  createdAt: ModelStringInput\n  createdBy: ModelStringInput\n  updatedAt: ModelStringInput\n  updatedBy: ModelStringInput\n  and: [ModelProgramConditionInput]\n  or: [ModelProgramConditionInput]\n  not: ModelProgramConditionInput\n}\n\ntype ModelProgramConnection {\n  items: [Program]\n  nextToken: String\n}\n\ninput ModelProgramFilterInput {\n  id: ModelIDInput\n  projectID: ModelStringInput\n  organizationID: ModelStringInput\n  departmentName: ModelStringInput\n  programName: ModelStringInput\n  description: ModelStringInput\n  websiteURL: ModelStringInput\n  status: ModelStringInput\n  createdAt: ModelStringInput\n  createdBy: ModelStringInput\n  updatedAt: ModelStringInput\n  updatedBy: ModelStringInput\n  and: [ModelProgramFilterInput]\n  or: [ModelProgramFilterInput]\n  not: ModelProgramFilterInput\n}\n\ninput ModelSizeInput {\n  ne: Int\n  eq: Int\n  le: Int\n  lt: Int\n  ge: Int\n  gt: Int\n  between: [Int]\n}\n\nenum ModelSortDirection {\n  ASC\n  DESC\n}\n\ninput ModelStringInput {\n  ne: String\n  eq: String\n  le: String\n  lt: String\n  ge: String\n  gt: String\n  contains: String\n  notContains: String\n  between: [String]\n  beginsWith: String\n  attributeExists: Boolean\n  attributeType: ModelAttributeTypes\n  size: ModelSizeInput\n}\n\ninput ModelTodoConditionInput {\n  name: ModelStringInput\n  description: ModelStringInput\n  and: [ModelTodoConditionInput]\n  or: [ModelTodoConditionInput]\n  not: ModelTodoConditionInput\n}\n\ntype ModelTodoConnection {\n  items: [Todo]\n  nextToken: String\n}\n\ninput ModelTodoFilterInput {\n  id: ModelIDInput\n  name: ModelStringInput\n  description: ModelStringInput\n  and: [ModelTodoFilterInput]\n  or: [ModelTodoFilterInput]\n  not: ModelTodoFilterInput\n}\n\ntype Mutation {\n  createTodo(input: CreateTodoInput!, condition: ModelTodoConditionInput): Todo\n  updateTodo(input: UpdateTodoInput!, condition: ModelTodoConditionInput): Todo\n  deleteTodo(input: DeleteTodoInput!, condition: ModelTodoConditionInput): Todo\n  createProgram(input: CreateProgramInput!, condition: ModelProgramConditionInput): Program\n  updateProgram(input: UpdateProgramInput!, condition: ModelProgramConditionInput): Program\n  deleteProgram(input: DeleteProgramInput!, condition: ModelProgramConditionInput): Program\n}\n\ntype PreRequisiteTask {\n  prerequisiteName: String!\n  dueDate: String\n  submission: String\n  submitFile: String\n  githubURL: String\n  description: String!\n  category: String!\n  custom: Boolean!\n}\n\ninput PreRequisiteTaskInput {\n  prerequisiteName: String!\n  dueDate: String\n  submission: String\n  submitFile: String\n  githubURL: String\n  description: String!\n  category: String!\n  custom: Boolean!\n}\n\ntype Program {\n  id: ID!\n  projectID: String\n  organizationID: String!\n  departmentName: String\n  programName: String!\n  description: String!\n  websiteURL: String\n  programDetail: ProgramDetail\n  terms: [Term]!\n  coAdmins: [CoAdmin]\n  mentors: [Mentor]\n  preRequisiteTasks: [PreRequisiteTask]\n  status: String!\n  createdAt: String!\n  createdBy: String!\n  updatedAt: String\n  updatedBy: String\n}\n\ntype ProgramDetail {\n  programLogoURL: String!\n  learningObjectives: [LearningObjective!]!\n  relevantLinks: [RelevantLink!]\n  requiredSkillsAndTechnologies: [String!]!\n  availableMenteeSpots: Float\n  publish: [Publish!]\n}\n\ninput ProgramDetailInput {\n  programLogoURL: String!\n  learningObjectives: [LearningObjectiveInput!]!\n  relevantLinks: [RelevantLinkInput!]\n  requiredSkillsAndTechnologies: [String!]!\n  availableMenteeSpots: Float\n  publish: [PublishInput!]\n}\n\ntype Publish {\n  publishTo: String!\n  url: String!\n}\n\ninput PublishInput {\n  publishTo: String!\n  url: String!\n}\n\ntype RelevantLink {\n  title: String!\n  url: String!\n}\n\ninput RelevantLinkInput {\n  title: String!\n  url: String!\n}\n\ntype Subscription {\n  onCreateTodo: Todo @aws_subscribe(mutations: [\"createTodo\"])\n  onUpdateTodo: Todo @aws_subscribe(mutations: [\"updateTodo\"])\n  onDeleteTodo: Todo @aws_subscribe(mutations: [\"deleteTodo\"])\n  onCreateProgram: Program @aws_subscribe(mutations: [\"createProgram\"])\n  onUpdateProgram: Program @aws_subscribe(mutations: [\"updateProgram\"])\n  onDeleteProgram: Program @aws_subscribe(mutations: [\"deleteProgram\"])\n}\n\ntype Term {\n  termName: String!\n  termStartDate: Float!\n  termEndDate: Float!\n  applicationAcceptanceStartDate: Float!\n  applicationAcceptanceEndDate: Float!\n}\n\ninput TermInput {\n  termName: String!\n  termStartDate: Float!\n  termEndDate: Float!\n  applicationAcceptanceStartDate: Float!\n  applicationAcceptanceEndDate: Float!\n}\n\ntype Todo {\n  id: ID!\n  name: String!\n  description: String\n  createdAt: AWSDateTime!\n  updatedAt: AWSDateTime!\n}\n\ninput UpdateProgramInput {\n  id: ID!\n  projectID: String\n  organizationID: String\n  departmentName: String\n  programName: String\n  description: String\n  websiteURL: String\n  programDetail: ProgramDetailInput\n  terms: [TermInput]\n  coAdmins: [CoAdminInput]\n  mentors: [MentorInput]\n  preRequisiteTasks: [PreRequisiteTaskInput]\n  status: String\n  createdAt: String\n  createdBy: String\n  updatedAt: String\n  updatedBy: String\n}\n\ninput UpdateTodoInput {\n  id: ID!\n  name: String\n  description: String\n}",
        "ApiId": {
          "Fn::GetAtt": [
            "AdminapidevGraphQlApi",
            "ApiId"
          ]
        }
      }
    },
    "AdminapidevGraphQlDsawsLambdaDataSource": {
      "Type": "AWS::AppSync::DataSource",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "AdminapidevGraphQlApi",
            "ApiId"
          ]
        },
        "Name": "awsLambdaDataSource",
        "Description": "Lambda DataSource",
        "Type": "AWS_LAMBDA",
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "AppSyncLambdaServiceRole",
            "Arn"
          ]
        },
        "LambdaConfig": {
          "LambdaFunctionArn": {
            "Fn::GetAtt": [
              "AdminAppSyncHandlerLambdaFunction",
              "Arn"
            ]
          }
        }
      }
    },
    "AdminapidevGraphQlResolverQuerygetProgram": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "AdminapidevGraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "AdminapidevGraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "getProgram",
        "RequestMappingTemplate": "{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"Invoke\",\n    \"payload\": {\n        \"field\": \"getProgram\",\n        \"arguments\":  $utils.toJson($context.arguments)\n    }\n}",
        "ResponseMappingTemplate": "$util.toJson($context.result)",
        "Kind": "UNIT",
        "DataSourceName": {
          "Fn::GetAtt": [
            "AdminapidevGraphQlDsawsLambdaDataSource",
            "Name"
          ]
        }
      }
    },
    "AdminapidevGraphQlResolverQuerylistPrograms": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "AdminapidevGraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "AdminapidevGraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Query",
        "FieldName": "listPrograms",
        "RequestMappingTemplate": "{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"Invoke\",\n    \"payload\": {\n        \"field\": \"listPrograms\",\n        \"arguments\":  $utils.toJson($context.arguments)\n    }\n}",
        "ResponseMappingTemplate": "$util.toJson($context.result)",
        "Kind": "UNIT",
        "DataSourceName": {
          "Fn::GetAtt": [
            "AdminapidevGraphQlDsawsLambdaDataSource",
            "Name"
          ]
        }
      }
    },
    "AdminapidevGraphQlResolverMutationcreateProgram": {
      "Type": "AWS::AppSync::Resolver",
      "DependsOn": "AdminapidevGraphQlSchema",
      "Properties": {
        "ApiId": {
          "Fn::GetAtt": [
            "AdminapidevGraphQlApi",
            "ApiId"
          ]
        },
        "TypeName": "Mutation",
        "FieldName": "createProgram",
        "RequestMappingTemplate": "{\n    \"version\": \"2017-02-28\",\n    \"operation\": \"Invoke\",\n    \"payload\": {\n        \"field\": \"createProgram\",\n        \"arguments\":  $utils.toJson($context.arguments)\n    }\n}",
        "ResponseMappingTemplate": "$util.toJson($context.result)",
        "Kind": "UNIT",
        "DataSourceName": {
          "Fn::GetAtt": [
            "AdminapidevGraphQlDsawsLambdaDataSource",
            "Name"
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-sls-app-sync-dev-ServerlessDeploymentBucketName"
      }
    },
    "MenteeAppSyncHandlerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "MenteeAppSyncHandlerLambdaVersionD7a4OwmLLrc2HRXaaz1muMrq9wHXNLjegEnqZolgPY"
      },
      "Export": {
        "Name": "sls-sls-app-sync-dev-MenteeAppSyncHandlerLambdaFunctionQualifiedArn"
      }
    },
    "MentorAppSyncHandlerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "MentorAppSyncHandlerLambdaVersionPXvQy71Fj37KMWsaA8h4jPsYzzu7XWrNinq3XpwKJo"
      },
      "Export": {
        "Name": "sls-sls-app-sync-dev-MentorAppSyncHandlerLambdaFunctionQualifiedArn"
      }
    },
    "AdminAppSyncHandlerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AdminAppSyncHandlerLambdaVersionefHS7upvAPLFe1wSXnrGd1xpV87mlvOw0M8iMnNJCc"
      },
      "Export": {
        "Name": "sls-sls-app-sync-dev-AdminAppSyncHandlerLambdaFunctionQualifiedArn"
      }
    },
    "MenteeapidevGraphQlApiKeyDefault": {
      "Value": {
        "Fn::GetAtt": [
          "MenteeapidevGraphQlApiKeyDefault",
          "ApiKey"
        ]
      }
    },
    "MenteeapidevGraphQlApiId": {
      "Value": {
        "Fn::GetAtt": [
          "MenteeapidevGraphQlApi",
          "ApiId"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-MenteeapidevGraphQlApiId"
        }
      }
    },
    "MenteeapidevGraphQlApiUrl": {
      "Value": {
        "Fn::GetAtt": [
          "MenteeapidevGraphQlApi",
          "GraphQLUrl"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-MenteeapidevGraphQlApiUrl"
        }
      }
    },
    "MentorapidevGraphQlApiKeyDefault": {
      "Value": {
        "Fn::GetAtt": [
          "MentorapidevGraphQlApiKeyDefault",
          "ApiKey"
        ]
      }
    },
    "MentorapidevGraphQlApiId": {
      "Value": {
        "Fn::GetAtt": [
          "MentorapidevGraphQlApi",
          "ApiId"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-MentorapidevGraphQlApiId"
        }
      }
    },
    "MentorapidevGraphQlApiUrl": {
      "Value": {
        "Fn::GetAtt": [
          "MentorapidevGraphQlApi",
          "GraphQLUrl"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-MentorapidevGraphQlApiUrl"
        }
      }
    },
    "AdminapidevGraphQlApiKeyDefault": {
      "Value": {
        "Fn::GetAtt": [
          "AdminapidevGraphQlApiKeyDefault",
          "ApiKey"
        ]
      }
    },
    "AdminapidevGraphQlApiId": {
      "Value": {
        "Fn::GetAtt": [
          "AdminapidevGraphQlApi",
          "ApiId"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-AdminapidevGraphQlApiId"
        }
      }
    },
    "AdminapidevGraphQlApiUrl": {
      "Value": {
        "Fn::GetAtt": [
          "AdminapidevGraphQlApi",
          "GraphQLUrl"
        ]
      },
      "Export": {
        "Name": {
          "Fn::Sub": "${AWS::StackName}-AdminapidevGraphQlApiUrl"
        }
      }
    }
  }
}